{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.js","api/index.js","components/Chart/Chart.js","components/CountryPicker/CountryPicker.js","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/image.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchApi","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","src","covidImage","alt","image","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.81dcd9fb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__9cL5Z\",\"card\":\"Cards_card__VSztc\",\"infected\":\"Cards_infected__5LgVd\",\"recovered\":\"Cards_recovered__loXlB\",\"deaths\":\"Cards_deaths__3Rsfr\",\"image\":\"Cards_image__28iyB\"};","import React from 'react';\r\nimport {Card,CardContent,Typography,Grid} from '@material-ui/core';\r\nimport styles from './Cards.module.css';\r\nimport cx from 'classnames';\r\nimport CountUp from 'react-countup';\r\nconst Cards=({data:{confirmed,recovered,deaths,lastUpdate}})=> {\r\n    if(!confirmed)\r\n    {\r\n        return <div>\r\n            Loading...\r\n        </div>\r\n    }\r\n    return (\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} >\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom>\r\n                            Infected\r\n                        </Typography>\r\n                        <Typography variant='h6'>\r\n                            <CountUp\r\n                                start={0}\r\n                                end={confirmed.value}\r\n                                duration={2.5}\r\n                                separator=','\r\n                            />  \r\n                        </Typography>\r\n                        <Typography color='textSecondary'>\r\n                            {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant='body2'>\r\n                            Active cases\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom>\r\n                            Recovered\r\n                        </Typography>\r\n                        <Typography variant='h6'>\r\n                            <CountUp\r\n                                start={0}\r\n                                end={recovered.value}\r\n                                duration={2.5}\r\n                                separator=','\r\n                            />  \r\n                        </Typography>\r\n                        <Typography color='textSecondary'>\r\n                            {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant='body2'>\r\n                           REcoverdData\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom>\r\n                            Deaths\r\n                        </Typography>\r\n                        <Typography variant='h6'>\r\n                            <CountUp\r\n                                start={0}\r\n                                end={deaths.value}\r\n                                duration={2.5}\r\n                                separator=','\r\n                            />  \r\n                        </Typography>\r\n                        <Typography color='textSecondary'>\r\n                            {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant='body2'>\r\n                            Total deaths\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cards;","import axios from 'axios';\r\nconst url=' https://covid19.mathdro.id/api';\r\nexport const fetchData=async(country)=>{\r\n    let changeableUrl=url;\r\n    if(country)\r\n    {\r\n        changeableUrl=`${url}/countries/${country}`\r\n    }\r\n    try{\r\n        const {data:{confirmed,recovered,deaths,lastUpdate}}=await axios.get(changeableUrl);\r\n        return {\r\n            confirmed,\r\n            recovered,\r\n            deaths,\r\n            lastUpdate\r\n        };\r\n    }\r\n    catch(error)\r\n    {\r\n        console.log(error);\r\n    }\r\n}\r\nexport const fetchDailyData=async()=>{\r\n    try{\r\n        const {data}=await axios.get(`${url}/daily`);\r\n        const modifiedData=data.map((dailyData)=>({\r\n            confirmed:dailyData.confirmed.total,\r\n            deaths:dailyData.deaths.total,\r\n            date:dailyData.reportDate\r\n\r\n        }));\r\n        return modifiedData;\r\n    }\r\n    catch(error)\r\n    {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchCountries=async()=>{\r\n    try{\r\n        const {data:{countries}}=await axios.get(`${url}/countries`);\r\n        return countries.map((country)=>country.name);\r\n    }\r\n    catch(error)\r\n    {\r\n        console.log(error);\r\n    }\r\n}","import React ,{useState,useEffect}from 'react';\r\nimport {fetchDailyData} from '../../api';\r\nimport {Line,Bar} from 'react-chartjs-2';\r\nimport styles from './Chart.module.css';\r\nconst Chart=({data:{confirmed,recovered,deaths},country})=> {\r\n    const [dailyData,setDailyData]=useState([]);\r\n    useEffect(()=>{\r\n        const fetchApi=async()=>{\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n        fetchApi();\r\n    },[]);\r\n    const lineChart=(\r\n        dailyData.length?(<Line data={{\r\n            labels:dailyData.map(({date})=>date),\r\n            datasets:[{\r\n                data:dailyData.map(({confirmed})=>confirmed),\r\n                label:'Infected',\r\n                borderColor:'#3333ff',\r\n                fill:true\r\n            },{\r\n                data:dailyData.map(({deaths})=>deaths),\r\n                label:'Deaths',\r\n                borderColor:'red',\r\n                backgroundColor:'rgba(255,0,0,0.5)',\r\n                fill:true\r\n            }]\r\n        }}\r\n        />):null\r\n    );\r\n    const barChart=(\r\n        confirmed?\r\n        (<Bar\r\n            data={{\r\n                labels:['Infected','Recovered','Deaths'],\r\n                datasets:[{\r\n                    label:'People',\r\n                    backgroundColor:['rgba(0,0,255,0.5)','rgba(0,255,0,0.5)','rgba(255,0,0,0.5)'],\r\n                    data:[confirmed.value,recovered.value,deaths.value]\r\n                }]                \r\n            }}\r\n            options={{\r\n                legend:{display:false},\r\n                title:{display:true,text:`Current state in ${country}`}\r\n            }}\r\n        />\r\n        ):null\r\n    )\r\n    return (\r\n        <div className={styles.container}>\r\n            {country?barChart:lineChart}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chart;","import React ,{useState,useEffect}from 'react';\r\nimport {NativeSelect,FormControl} from '@material-ui/core';\r\nimport styles from './CountryPicker.module.css';\r\nimport {fetchCountries} from '../../api';\r\nconst CountryPicker=({handleCountryChange})=> {\r\n    const [fetchedCountries,setFetchedCountries]=useState([]);\r\n    useEffect(()=>{\r\n        const fetchApi=async()=>{\r\n            setFetchedCountries(await fetchCountries());\r\n        }\r\n        fetchApi();\r\n    },[setFetchedCountries]);\r\n    return (\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect defaultValue='' onChange={(e)=>handleCountryChange(e.target.value)}>\r\n                <option value=''>Global</option>\r\n                    {fetchedCountries.map((country,i)=><option key={i} value={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    );\r\n}\r\n\r\nexport default CountryPicker;","import React, { Component } from 'react';\nimport Cards from './components/Cards/Cards';\nimport Chart from './components/Chart/Chart';\nimport CountryPicker from './components/CountryPicker/CountryPicker';\nimport styles from './App.module.css';\nimport {fetchData} from './api';\nimport covidImage from './images/image.png';\nclass App extends Component {\n  state={\n    data:{},\n    country:''\n  }\n  async componentDidMount() {\n    const fetchedData=await fetchData();\n    this.setState({\n      data:fetchedData\n    });\n  }\n  handleCountryChange=async(country)=>{\n    const fetchedData=await fetchData(country);\n    this.setState({\n      data:fetchedData,\n      country:country\n    });\n  }\n  render() {    \n    const {data,country}=this.state;\n    return (\n      <div className={styles.container}>\n        <img src={covidImage} alt='logo' className={styles.image}/>\n        <Cards data={data}/>\n        <CountryPicker handleCountryChange={this.handleCountryChange}/>\n        <Chart data={data} country={country}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__4fQh2\",\"image\":\"App_image__1xcez\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__b_Zfl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__39D1G\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}